=============================================================================================
SIGNAUX + EXIT STATUS
=============================================================================================
CTRL C						OK
	-> SIG_INT
	(New line)
	$? = 130
---------------------------------------------------------------------------------------------
CTRL D						OK
	-> EOF
	(Quitte shell si ligne vide en printant "exit")
---------------------------------------------------------------------------------------------
CTRL \						OK
	-> SIG_QUIT
	(Ne fais rien)
---------------------------------------------------------------------------------------------
cat							OK
CTRL D
	-> quitte sans \n
	$? = 0
---------------------------------------------------------------------------------------------
cat							OK
CTRL C
	-> quitte avec ^C\n
	$? = 130
---------------------------------------------------------------------------------------------
cat							OK
CTRL \
	-> quitte avec ^\Quit (core dumped)\n
	$? = 131	
---------------------------------------------------------------------------------------------	
quand on fait command invalide	OK
	$? = 127
---------------------------------------------------------------------------------------------
cat | ls						OK
CTRL C
	-> fais le ls avant le cat et attend (prompt du cat)
	-> $? = 0
---------------------------------------------------------------------------------------------
expr $? + $? -> dépend de la valeur de $?
expr $? + $? -> 0
expr $? + $? -> 2			En attente de l'expansion
expr $? + $? -> 0
expr $? + $? -> 2
---------------------------------------------------------------------------------------------
mkdir haha			OK
./haha		
	-> $? = 126
---------------------------------------------------------------------------------------------
haha | ls | haha	OK
	-> $? = 127
---------------------------------------------------------------------------------------------
mkdir haha		OK
mkdir haha
	-> $? = 1
=============================================================================================
REDIRECTION
=============================================================================================
echo test >1 > 2 >3		OK
	-> créer tous les fichiers mais met le résultat seulement dans 3
---------------------------------------------------------------------------------------------
echo test >1 > 2 >3		OK
<2<3 grep test
	-> re lis que le fichier 3
---------------------------------------------------------------------------------------------
echo test >1 > 2 >3		OK
<2 cat >1 <3
	-> "met le contenu du 1" trunc all file so, there no more input to cat
---------------------------------------------------------------------------------------------
<mdr | >lol < mdr > mdr | <mdr		OK
	->	crée lol mais pas mdr, + 3 messages d'erreurs à mettre
---------------------------------------------------------------------------------------------
<<$USER (On va dire que $USER = user)
user
oui
$USER
	-> quitte qu'a $USER et non sa valeur
---------------------------------------------------------------------------------------------
<<oui
CTRL D
	bash: warning: here-document at line 2 delimited by end-of-file (wanted `oui')
	-> $? = 0
---------------------------------------------------------------------------------------------
<<oui
CTRL C
	\n
	-> $? = 130
---------------------------------------------------------------------------------------------
<<oui
CTRL \
	Fais rien
	-> $? = 0
---------------------------------------------------------------------------------------------
>tkt <<oui cat
CTRL C
	-> ne pas créer tkt + $? = 130
---------------------------------------------------------------------------------------------
<<'<lol'
	-> limiter <lol
---------------------------------------------------------------------------------------------
<<""
	-> doit quitter au \n
---------------------------------------------------------------------------------------------
<lol
	-> infile invalid + $? = 1
---------------------------------------------------------------------------------------------
>>>
	syntax error + $? = 2
---------------------------------------------------------------------------------------------
><
	syntax error + $? = 2
---------------------------------------------------------------------------------------------
<>
	syntax error + $? = 2
=============================================================================================
VARIABLE + QUOTE
=============================================================================================
export TEST=coucou
echo $TEST
	-> coucou
echo '$TEST'
	-> $TEST
echo "$TEST"
	-> coucou
echo '"$TEST"'
	-> "$TEST"
echo "'$TEST'"
	-> 'coucou'
echo "test  $TEST  test"
	-> test  coucou  test
echo 'test  $TEST  test'
	-> test  $TEST  test
echo "'test  $TEST  test'"
	-> 'test  coucou  test'
echo '"test  $TEST  test"'
	-> "test  $TEST  test"
echo "$TEST  t  $TEST"
	-> coucou  t  coucou
echo $TEST$TEST
	-> coucoucoucou
echo "test"'test'test"test"
	-> testtesttesttest
---------------------------------------------------------------------------------------------
export lol="echo <lol"
$lol
	-> print <lol et pas d'erreur de infile
---------------------------------------------------------------------------------------------
export lol="echo <lol"
"$lol"
	-> command 'echo <lol' not found + $? = 127
---------------------------------------------------------------------------------------------
echo
echo $?coucou
	-> 0coucou
=============================================================================================
PIPE
=============================================================================================
|		
	bash: syntax error near unexpected token `|'		OK
	-> $? = 2
---------------------------------------------------------------------------------------------
$tkt
	-> \n
---------------------------------------------------------------------------------------------
$tkt | $tkt
	-> \n
---------------------------------------------------------------------------------------------
$tkt |
	bash: syntax error near unexpected token `|'		OK
	-> $? = 2
---------------------------------------------------------------------------------------------
lol | |
	bash: syntax error near unexpected token `|'		OK
	-> $? = 2
---------------------------------------------------------------------------------------------
>|
	bash: syntax error near unexpected token `|'		OK
	-> $? = 2
---------------------------------------------------------------------------------------------
<lol | |
	bash: syntax error near unexpected token `|'		OK
	-> $? = 2
---------------------------------------------------------------------------------------------
cat | ls
	-> affiche le résultat de ls et nous permet d'écrire 1 ligne (voir bash)	OK
---------------------------------------------------------------------------------------------
cat | cat | cat | cat | ls
	> affiche le résultat de ls et nous permet d'écrire 4 lignes	OK
---------------------------------------------------------------------------------------------
echo lol | lol | lol	OK
=============================================================================================
ECHO
=============================================================================================
echo tkt
	-> tkt\n
---------------------------------------------------------------------------------------------
echo tkt                                tkt
	-> tkt tkt\n
---------------------------------------------------------------------------------------------
echo "tkt                                tkt"
	-> tkt                                tkt\n
---------------------------------------------------------------------------------------------
echo 'tkt                                tkt'
	-> tkt                                tkt\n
---------------------------------------------------------------------------------------------
echo -n tkt
	-> tkt
---------------------------------------------------------------------------------------------
echo -nnnnnnnnnnnnnnnnnnnnnnnnn tkt
	-> tkt
---------------------------------------------------------------------------------------------
echo -nnnnnnnnnnnnnnnnnnnnnnnnn -n -n -n -n tkt
	-> tkt
---------------------------------------------------------------------------------------------
echo -nnnnnnnnnnn -n -n -n -n tkt -n
	-> tkt -n
=============================================================================================
PWD
=============================================================================================
pwd lol
	-> pwd fonction sans pb et $? = 0
=============================================================================================
CD
=============================================================================================
mkdir haha
chmod 000 haha
cd haha
	-> $? = 1
---------------------------------------------------------------------------------------------
(initial emplacement : /tmp/minishell)
cd srcs
echo pwd : $PWD , old pwd : $OLDPWD
	-> pwd : /tmp/minishell/srcs , old pwd : /tmp/minishell
unset PWD
cd ..
echo pwd : $PWD , old pwd : $OLDPWD
	-> pwd : /tmp/minishell , old pwd :
---------------------------------------------------------------------------------------------
(initial emplacement : /tmp/minishell
cd .. | exit
pwd
	-> /tmp/minishell
=============================================================================================
EXIT
=============================================================================================
exit	OK
	-> on quitte le programme et on met $? à 0
---------------------------------------------------------------------------------------------
exit 55	OK
	-> on quitte le programme et on met $? à 55
---------------------------------------------------------------------------------------------
exit -1		OK
	-> on quitte le programme et on met $? à 255
---------------------------------------------------------------------------------------------
exit 256	OK
	-> on quitte le programme et on met $? à 0
---------------------------------------------------------------------------------------------
exit 55 54 323	OK
	bash: exit: too many arguments
	-> on quitte pas le programme et on met $? à 1
---------------------------------------------------------------------------------------------
exit p	OK
	bash: exit: p: numeric argument required
	-> on quitte le programme et on met $? à 2
---------------------------------------------------------------------------------------------
exit p 152 452	OK
	bash: exit: p: numeric argument required
	-> on quitte le programme et on met $? à 2
---------------------------------------------------------------------------------------------
exit 55 p 323	OK
	bash: exit: too many arguments
	-> on quitte pas le programme et on met $? à 1
---------------------------------------------------------------------------------------------
exit nb (nb < -9223372036854775808 ou nb > 9223372036854775807)	OK
	bash: exit: p: numeric argument required
	-> on quitte le programme et on met $? à 2
=============================================================================================
EXPORT
=============================================================================================
export a =6_b
	bash: export: `=6_b': not a valid identifier
	-> $? = 1
---------------------------------------------------------------------------------------------
export a= 6_b
	bash: export: `6_b': not a valid identifier
	-> $? = 1
---------------------------------------------------------------------------------------------
export 6_a=b
	bash: export: `6_a=b': not a valid identifier
	-> $? = 1
---------------------------------------------------------------------------------------------
export -lol
	-> invalid option + $? = 2
---------------------------------------------------------------------------------------------
export 0oui
	-> invalid identifier + $? = 1
---------------------------------------------------------------------------------------------
export COUCOU | ls
	-> COUCOU n'existe pas
---------------------------------------------------------------------------------------------
export tkt+=oui
	-> $tkt = oui
---------------------------------------------------------------------------------------------
export tkt=oui
export tkt
	-> $tkt = oui
---------------------------------------------------------------------------------------------
export tkt=oui 1mdr
	-> invalid identifier + $? = 1 + $tkt = oui
=============================================================================================
UNSET
=============================================================================================
unset 6_a
	bash: export: `6_a=b': not a valid identifier
	-> $? = 1
---------------------------------------------------------------------------------------------
unset -lol
	-> invalid option + $? = 2
---------------------------------------------------------------------------------------------
unset 0oui
	-> invalid identifier + $? = 1
---------------------------------------------------------------------------------------------
unset COUCOU | ls
	-> COUCOU existe toujours
---------------------------------------------------------------------------------------------
unset tkt 1mdr
	-> invalid identifier + $? = 1 + $tkt n'existe plus
=============================================================================================
ENV
=============================================================================================
env -l
	-> erreur option + $? = 125
---------------------------------------------------------------------------------------------
env coucou
	-> erreur argument + $? = 127
---------------------------------------------------------------------------------------------
clear | env -l
	-> $? = 125
